generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id         String   @id @default(uuid())
  email      String   @unique
  givenName  String?  @map("given_name")
  familyName String?  @map("family_name")
  picture    String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  events     Event[]

  @@map("profiles")
}

model Event {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  date        DateTime
  hostId      String   @map("host_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  host        Profile  @relation(fields: [hostId], references: [id], onDelete: Cascade)
  signups     Signup[]

  @@index([hostId])
  @@map("events")
}

model Signup {
  id              String          @id @default(uuid())
  singerName      String          @map("singer_name")
  songTitle       String          @map("song_title")
  artist          String
  performanceType PerformanceType @default(SOLO) @map("performance_type")
  notes           String?
  position        Int
  status          SignupStatus    @default(QUEUED)
  performingAt    DateTime?       @map("performing_at")
  eventId         String          @map("event_id")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  event           Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([status])
  @@index([eventId, status])
  @@index([position])
  @@map("signups")
}

enum PerformanceType {
  SOLO
  DUET
  GROUP
}

enum SignupStatus {
  QUEUED
  PERFORMING
  COMPLETE
  CANCELLED
}
